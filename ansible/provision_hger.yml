- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/vars.yml
  tasks:
  - name: create the VPC for the linux4win
    ec2_vpc_net:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      name: "{{ ec2_vpc }}"
      state: "present"
      cidr_block: "{{ ec2_vpc_cidr }}"
      region: "{{ ec2_region }}"
      tags:
        identity: "{{ ec2_vpc }}"
    register: linux4win_vpc
  - name: Set VPC ID in variable
    set_fact:
      linux4win_vpc_id: "{{ linux4win_vpc.vpc.id }}"

  - name: create the subnet for the linux4win
    ec2_vpc_subnet:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      state: "present"
      vpc_id: "{{ linux4win_vpc_id }}"
      cidr: "{{ ec2_vpc_cidr }}"
      az: "{{ ec2_region }}a"
      region: "{{ ec2_region }}"
      resource_tags:
        identity: "Public Subnet"
    register: linux4win_subnet
  - name: Set subnet ID in variable
    set_fact:
        linux4win_subnet_id: "{{ linux4win_subnet.subnet.id }}"

  - name: create internet gateway for linux4win
    ec2_vpc_igw:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      vpc_id: "{{ linux4win_vpc_id }}"
      region: "{{ ec2_region }}"
      state: "present"
    register: linux4win_igw
  - name: Set Internet Gateway ID in variable
    set_fact:
        linux4win_igw_id: "{{ linux4win_igw.gateway_id }}"

  - name:               Set up public subnet route table
    ec2_vpc_route_table:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"  
        vpc_id: "{{ linux4win_vpc_id }}"
        region: "{{ ec2_region }}"
        subnets:
          - "{{ linux4win_subnet_id }}"
        routes:
          - dest:         "0.0.0.0/0"
            gateway_id:   "{{ linux4win_igw_id }}"

  - name: Ensure a security group is in place
    ec2_group:
      name: "{{ ec2_security_group }}"
      description: Security Group for linux4win workshop
      vpc_id: "{{ linux4win_vpc_id }}"
      region: "{{ ec2_region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 42
          to_port: 42
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: udp
          from_port: 42
          to_port: 42
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: udp
          from_port: 88
          to_port: 88
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 88
          to_port: 88
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: udp
          from_port: 135
          to_port: 135
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 135
          to_port: 135
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 137
          to_port: 137
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: udp
          from_port: 137
          to_port: 137
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 139
          to_port: 139
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 445
          to_port: 445
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: udp
          from_port: 445
          to_port: 445
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 464
          to_port: 464
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 389
          to_port: 389
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: udp
          from_port: 389
          to_port: 389
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 636
          to_port: 636
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 1433
          to_port: 1433
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 1512
          to_port: 1512
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: udp
          from_port: 1512
          to_port: 1512
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 3268
          to_port: 3268
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 3269
          to_port: 3269
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 45152
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 3389
          to_port: 3389
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 5985
          to_port: 5985
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 5986
          to_port: 5986
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 53
          to_port: 53
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: udp
          from_port: 53
          to_port: 53
          cidr_ip: "{{ ec2_vpc_cidr }}"
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 9090
          to_port: 9090
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Provision RHEL hosts
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      assign_public_ip: no
      vpc_subnet_id: "{{ linux4win_subnet_id }}"
      instance_type: t2.micro
      image: ami-0df0e7600ad0913a9
      user_data: "{{ lookup('file', '/tmp/temp-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_rhelhost_systems }}"
      count_tag:
        identity: rhelhost
      instance_tags:
        identity: rhelhost
    register: rhelhost

#  - name: Add vpc info to stuff
#    add_host: hostname={{ item.public_ip }} groups=rhelhost
#    with_items: "{{ rhelhost.tagged_instances }}"

#  - name: Add RHEL host instance public IPs to host group
#    add_host: hostname={{ item.public_ip }} groups=rhelhost
#    with_items: "{{ rhelhost.tagged_instances }}"

  - name: Add RHEL host instance private IPs to host group
    add_host: hostname={{ item.private_ip }} groups=rhelhost
    with_items: "{{ rhelhost.tagged_instances }}"

  - name: Print IP addresses of RHEL hosts
    debug:
      msg: "{{ groups['rhelhost'] }}"

  - name: Print Private IP addresses of RHEL hosts to ./rhelhost_instances.out
    lineinfile:
      path: /tmp/rhelhost_instances.out
      line: '{{ item }}'
    with_items: "{{ groups['rhelhost'] }}"
