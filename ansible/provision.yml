- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/vars.yml
  tasks:
  - name: Download Cockpit user data file
    get_url:
      url: "{{ cockpit_prep }}"
      dest: /tmp/cockpit-prep.sh
      validate_certs: no
      force: yes

  - name: Download RHEL host user data file
    get_url:
      url: "{{ rhelhost_prep }}"
      dest: /tmp/rhelhost-prep.sh
      validate_certs: no
      force: yes
      
  - name: Download Windows host user data file
    get_url:
      url: "{{ winhost_prep }}"
      dest: /tmp/winhost-prep.ps1
      validate_certs: no
      force: yes
 
  - name: Download Active Directory user data file
    get_url:
      url: "{{ ad_prep }}"
      dest: /tmp/ad-prep.ps1
      validate_certs: no
      force: yes

  - name: Create empty file to store Cockpit public IPs
    file:
      path: "./cockpit_servers.out"
      state: touch

  - name: Create empty file to store RHEL host public IPs
    file:
      path: "./rhelhost_instances.out"
      state: touch

  - name: Create empty file to store Windows host public IPs
    file:
      path: "./winhost_instances.out"
      state: touch

  - name: Create empty file to store Active Directory host public IPs
    file:
      path: "./ad_instances.out"
      state: touch

  - name: Ensure a security group is in place
    ec2_group:
      name: "{{ ec2_security_group }}"
      description: Security Group for linux4win workshop
      region: "{{ ec2_region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"

      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 42
          to_port: 42
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 42
          to_port: 42
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 88
          to_port: 88
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 88
          to_port: 88
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 135
          to_port: 135
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 135
          to_port: 135
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 137
          to_port: 137
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 137
          to_port: 137
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 139
          to_port: 139
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 445
          to_port: 445
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 389
          to_port: 389
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 389
          to_port: 389
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 636
          to_port: 636
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 1512
          to_port: 1512
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 1512
          to_port: 1512
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 3268
          to_port: 3268
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 3269
          to_port: 3269
          cidr_ip: 0.0.0.0/0

        - proto: tcp
          from_port: 49152
          to_port: 65535
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 3389
          to_port: 3389
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 53
          to_port: 53
          cidr_ip: 0.0.0.0/0
        - proto: udp
          from_port: 53
          to_port: 53
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 9090
          to_port: 9090
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Provision Active Directory host
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: t2.medium
      image: ami-0e0564dc8e882f217
      user_data: "{{ lookup('file', '/tmp/ad-prep.ps1') }}"
      wait: true
      exact_count: "{{ number_of_ad_systems }}"
      count_tag:
        identity: ad
      instance_tags:
        identity: ad
    register: ad
    
  - name: Add Active Directory host instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=ad
    with_items: "{{ ad.tagged_instances }}"

  - name: Print IP addresses of Windows hosts to ./ad_instances.out
    lineinfile:
      path: ./ad_instances.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ ad.tagged_instances }}"
  
  - name: Replace AD variable placeholder in Cockpit prep files
    lineinfile:
      path: /tmp/cockpit-prep.sh
      regexp: '^DNSIP=ADIPADDRESS'
      line: "DNSIP={{ item.private_ip }}"
      create: yes
    with_items: "{{ ad.tagged_instances }}"

  - name: Replace RHN_ACCOUNT variable placeholder in Cockpit prep files
    lineinfile:
      path: /tmp/cockpit-prep.sh
      regexp: '^RHN_ACCOUNT=THEACCOUNT'
      line: "RHN_ACCOUNT={{ rhn_account }}"
      create: yes

  - name: Replace RHN_PASSWORD variable placeholder in Cockpit prep files
    lineinfile:
      path: /tmp/cockpit-prep.sh
      regexp: '^RHN_PASSWORD=THEPASSWORD'
      line: "RHN_PASSWORD=\"{{ rhn_password }}\""
      create: yes

  - name: Replace RHN_ACCOUNT variable placeholder in rhelhost prep files
    lineinfile:
      path: /tmp/rhelhost-prep.sh
      regexp: '^RHN_ACCOUNT=THEACCOUNT'
      line: "RHN_ACCOUNT={{ rhn_account }}"
      create: yes

  - name: Replace RHN_PASSWORD variable placeholder in rhelhost prep files
    lineinfile:
      path: /tmp/rhelhost-prep.sh
      regexp: '^RHN_PASSWORD=THEPASSWORD'
      line: "RHN_PASSWORD=\"{{ rhn_password }}\""
      create: yes

  - name: Provision Cockpit servers
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: t2.medium
      user_data: "{{ lookup('file', '/tmp/cockpit-prep.sh') }}"
      image: "{{ rhel_ami_id }}"
      volumes:
        - device_name: /dev/sdb
          volume_size: 1
          delete_on_termination: true
        - device_name: /dev/sdc
          volume_size: 1
          delete_on_termination: true
      wait: true
      exact_count: "{{ number_of_cockpit_systems }}"
      count_tag:
        identity: cockpit
      instance_tags:
        identity: cockpit
    register: cockpit

  - name: Provision RHEL hosts
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: t2.micro
      image: "{{ rhel_ami_id }}"
      user_data: "{{ lookup('file', '/tmp/rhelhost-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_rhelhost_systems }}"
      count_tag:
        identity: rhelhost
      instance_tags:
        identity: rhelhost
    register: rhelhost

  - name: Provision Windows hosts
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group }}"
      instance_type: t2.micro
      image: "{{ win_ami_id }}"
      user_data: "{{ lookup('file', '/tmp/winhost-prep.ps1') }}"
      wait: true
      exact_count: "{{ number_of_winhost_systems }}"
      count_tag:
        identity: winhost
      instance_tags:
        identity: winhost
    register: winhost

  - name: Add Cockpit instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=cockpit
    with_items: "{{ cockpit.tagged_instances }}"

  - name: Print IP addresses of Cockpit systems
    debug:
      msg: "{{ groups['cockpit'] }}"

  - name: Print IP addresses of Cockpit systems to ./cockpit_instances.out
    lineinfile:
      path: ./cockpit_instances.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ cockpit.tagged_instances }}"

  - name: Add RHEL host instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=rhelhost
    with_items: "{{ rhelhost.tagged_instances }}"

  - name: Print IP addresses of RHEL hosts
    debug:
      msg: "{{ groups['rhelhost'] }}"

  - name: Print IP addresses of RHEL hosts to ./rhelhost_instances.out
    lineinfile:
      path: ./rhelhost_instances.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ rhelhost.tagged_instances }}"

  - name: Add Windows host instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=winhost
    with_items: "{{ winhost.tagged_instances }}"

  - name: Print IP addresses of Windows hosts
    debug:
      msg: "{{ groups['winhost'] }}"

  - name: Print IP addresses of Windows hosts to ./winhost_instances.out
    lineinfile:
      path: ./winhost_instances.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ winhost.tagged_instances }}"
    
 
  - name: Print IP addresses of Cockpit hosts
    debug:
      msg: "{{ groups['cockpit'] }}"

  - name: IMPORTANT REMINDER
    debug:
      msg: "If this is on AWS, run the remove_userdata.yml playbook or risk leaking passwords!"
